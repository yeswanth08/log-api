services:
  db:
    image: postgres:alpine
    container_name: postgres_db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: incidentsdb
    ports:
      - "5452:5432"
    restart: always
    volumes:
      # official path for postgres data
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ 'CMD-SHELL', 'pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}' ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:alpine
    container_name: redis_container
    ports:
      - "6369:6379"
    restart: always
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "PING"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  app:
    build:
      context: .
    container_name: backend_application
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "3000:3000"
    restart: always
    environment:
      DATABASE_URL: postgresql://postgres:password@postgres_db:5432/incidentsdb
    command: >
      sh -c "
          if ! npx prisma migrate status | grep -q 'Nothing to apply'; then
              echo 'Running migrations...';
                      
              # used to reset the database and apply all migrations from scratch

              # npx prisma migrate reset --force; 

              npx prisma migrate dev --name init && \
              npm run seed;
          fi;
              echo 'Starting the application...';
              npm run start;
              wait;
      "

# by default created a network and bind the containers to it

volumes:
  postgres_data:
  redis_data:
